---
import AnimatedTextReveal from "../components/AnimatedTextReveal.astro";
---

<style>
  /* ==================================================
   * もともとのスタイル
   * ================================================== */
  .scene-container {
    position: relative;
    width: 100%;
    height: 100vh;
  }

  .vrm-container {
    width: 100%;
    height: 100vh;
    transition: position 0.3s ease;
    z-index: 1; /* 基本の z-index を設定 */
  }

  .vrm-container.fixed {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
  }

  .vrm-container.normal {
    position: relative;
    z-index: 1;
  }

  .virtual-scroll {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow-y: scroll;
    z-index: 2;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .virtual-scroll::-webkit-scrollbar {
    display: none;
  }

  .scroll-content {
    height: 200%;
    pointer-events: none;
  }

  /* AnimatedTextReveal のスタイル */
  .animated-text {
    position: absolute; /* .scene-container に対して絶対配置 */
    top: 10%;
    left: 50%;
    transform: translateX(-50%);
    width: auto;
    text-align: center;
    display: none; /* 初期状態では非表示 */
    z-index: 3; 
    pointer-events: none;
  }

  /* ==================================================
   * ローディング画面関連のスタイル（背景が白でバーが黒）
   * ================================================== */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: #ffffff; /* 白背景 */
    z-index: 9999; /* 最前面 */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    pointer-events: all; /* 下の要素を触れないように */
  }

  .loading-text {
    color: #000; /* 黒文字 */
    margin-bottom: 16px;
    font-size: 1.2rem;
  }

  .loading-progress {
    width: 60%;
    max-width: 400px;
    height: 20px;
    background-color: #ccc; 
    border-radius: 10px;
    overflow: hidden;
  }

  .progress-bar {
    width: 0%;
    height: 100%;
    background-color: #000; /* プログレスバーを黒 */
    transition: width 0.1s ease;
  }
</style>

<!-- ==================================================
     ローディング画面
     ================================================== -->
<div id="loading-overlay" class="loading-overlay">
  <div class="loading-text">
    Loading... <span id="loading-percentage">0</span>%
  </div>
  <div class="loading-progress">
    <div id="progress-bar" class="progress-bar"></div>
  </div>
</div>

<!-- ==================================================
     メインシーン
     ================================================== -->
<div class="scene-container">
  <div id="vrm-container" class="vrm-container fixed"></div>
  <div class="virtual-scroll" id="virtual-scroll" tabindex="-1">
    <div class="scroll-content"></div>
  </div>
  
  <div id="animated-text" class="animated-text">
    <AnimatedTextReveal text="↓kawaii" textSize="3rem" space="1rem" />
  </div>
</div>

<script>
  import * as THREE from "three";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
  import { VRM, VRMLoaderPlugin } from "@pixiv/three-vrm";
  import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
  import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
  import { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";
  import type { GLTF } from "three/examples/jsm/loaders/GLTFLoader.js";

  // VRMA 用の追加インポート
  import {
    createVRMAnimationClip,
    VRMAnimationLoaderPlugin,
  } from "@pixiv/three-vrm-animation";

  // ==================================================
  // グリッチシェーダーの定義
  // ==================================================
  const GlitchShader = {
    uniforms: {
      tDiffuse: { value: null },
      time: { value: 0 },
      amount: { value: 0.0 },
      seed: { value: 0.02 },
      seed_x: { value: 0.02 },
      seed_y: { value: 0.02 },
      distortion_x: { value: 0.5 },
      distortion_y: { value: 0.6 },
      col_s: { value: 0.05 }
    },
    vertexShader: `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform sampler2D tDiffuse;
      uniform float time;
      uniform float amount;
      uniform float seed;
      uniform float seed_x;
      uniform float seed_y;
      uniform float distortion_x;
      uniform float distortion_y;
      uniform float col_s;
      varying vec2 vUv;

      float rand(vec2 co) {
        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
      }

      void main() {
        if(amount == 0.0){
          gl_FragColor = texture2D(tDiffuse, vUv);
          return;
        }

        vec2 p = vUv;
        float xs = floor(gl_FragCoord.x / 0.5);
        float ys = floor(gl_FragCoord.y / 0.5);
        
        if(rand(vec2(xs * seed, ys * seed * 50.0)) > 0.9){
          p.y = p.y + (rand(vec2(xs * seed * 50.0, ys * seed * 50.0)) - 0.5) * 0.1 * amount;
        }

        if(rand(vec2(xs * seed, ys * seed * 50.0)) > 0.9){
          p.x = p.x + (rand(vec2(xs * seed * 50.0, ys * seed * 50.0)) - 0.5) * 0.1 * amount;
        }

        vec4 c = texture2D(tDiffuse, p);
        vec4 c_r = texture2D(tDiffuse, vec2(p.x + amount * seed_x, p.y + amount * seed_y * 0.5));
        vec4 c_g = texture2D(tDiffuse, vec2(p.x + amount * seed_x * 0.966, p.y + amount * seed_y));
        vec4 c_b = texture2D(tDiffuse, vec2(p.x + amount * seed_x * 1.033, p.y + amount * seed_y * 1.5));

        vec4 normal;
        normal.r = c.r * (1.0 - amount) + c_r.r * amount;
        normal.g = c.g * (1.0 - amount) + c_g.g * amount;
        normal.b = c.b * (1.0 - amount) + c_b.b * amount;
        normal.a = c.a;

        gl_FragColor = normal;
      }
    `
  };

  interface SceneSetup {
    scene: THREE.Scene;
    camera: THREE.PerspectiveCamera;
    renderer: THREE.WebGLRenderer;
    composer: EffectComposer;
    glitchPass: ShaderPass;
    directionalLight: THREE.DirectionalLight;
    ambientLight: THREE.AmbientLight;
  }

  // ==================================================
  // シーン初期化
  // ==================================================
  const initScene = (): SceneSetup => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xffffff);

    const camera = new THREE.PerspectiveCamera(
      70.0,
      window.innerWidth / window.innerHeight,
      0.1,
      100.0
    );
    camera.position.set(1, 1.4, 0.2);
    camera.lookAt(0, 1.4, 0);

    const container = document.getElementById("vrm-container");
    if (!container) {
      throw new Error("Container element not found");
    }

    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true,
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setClearColor(0xffffff, 1);
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    container.appendChild(renderer.domElement);

    const composer = new EffectComposer(renderer);
    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);

    const glitchPass = new ShaderPass(GlitchShader);
    composer.addPass(glitchPass);

    const directionalLight = new THREE.DirectionalLight(0xeeeeee, 1.0);
    directionalLight.position.set(1, 1, 1);
    scene.add(directionalLight);

    const ambientLight = new THREE.AmbientLight(0xeeeeee, 0.5);
    scene.add(ambientLight);

    return {
      scene,
      camera,
      renderer,
      composer,
      glitchPass,
      directionalLight,
      ambientLight
    };
  };

  // ==================================================
  // メイン処理
  // ==================================================
  const main = async () => {
    // ロード中はスクロール無効化
    document.body.style.overflow = "hidden";

    const {
      scene,
      camera,
      renderer,
      composer,
      glitchPass,
      directionalLight,
      ambientLight
    } = initScene();

    // 必須要素の取得(存在しなければError)
    const vrmContainer = document.getElementById("vrm-container");
    if (!vrmContainer) throw new Error("#vrm-container not found");

    const animatedText = document.getElementById("animated-text");
    if (!animatedText) throw new Error("#animated-text not found");

    const virtualScroll = document.getElementById("virtual-scroll");
    if (!virtualScroll) throw new Error("#virtual-scroll not found");

    // ローディング画面関連の取得
    const loadingOverlay = document.getElementById("loading-overlay");
    if (!loadingOverlay) throw new Error("#loading-overlay not found");

    const progressBar = document.getElementById("progress-bar");
    if (!progressBar) throw new Error("#progress-bar not found");

    const loadingPercentage = document.getElementById("loading-percentage");
    if (!loadingPercentage) throw new Error("#loading-percentage not found");

    // ロード済みフラグや進捗率
    let vrmLoaded = false;
    let vrmaLoaded = false;
    let vrmProgressValue = 0;
    let vrmaProgressValue = 0;

    // updateLoadingDisplay で2つの進捗平均を表示
    function updateLoadingDisplay() {
      const totalProgress = (vrmProgressValue + vrmaProgressValue) / 2.0;
      const percent = Math.floor(totalProgress * 100);

      progressBar.style.width = percent + "%";
      loadingPercentage.textContent = String(percent);

      // 両方読み込み終わったらオーバーレイを消してスクロール有効化
      if (vrmLoaded && vrmaLoaded) {
        setTimeout(() => {
          loadingOverlay.style.display = "none";
          // ロード完了したらスクロールを戻す
          document.body.style.overflow = "";
        }, 500);
      }
    }

    // セッションストレージ確認
    const isScrollCompleted = sessionStorage.getItem("scrollCompleted") === "true";

    // カメラの初期位置と最終位置を定義
    const initialCameraPos = new THREE.Vector3(1, 1.4, 0.2);
    const finalCameraPos = new THREE.Vector3(0, 1.3, 0.8);

    // カメラの初期注視点と最終注視点を定義
    const initialLookAt = new THREE.Vector3(0, 1.4, 0);
    const finalLookAt = new THREE.Vector3(0, 1.5, 0);

    // 現在の注視点（アニメーション用）
    const currentLookAt = new THREE.Vector3().copy(initialLookAt);

    // スクロール連動の初期値
    if (isScrollCompleted) {
      vrmContainer.classList.remove("fixed");
      vrmContainer.classList.add("normal");
      animatedText.style.display = "block";
      glitchPass.uniforms.amount.value = 0.2;
      
      // スクロール完了時は最終位置に設定
      camera.position.copy(finalCameraPos);
      currentLookAt.copy(finalLookAt);
      camera.lookAt(currentLookAt);
      
      console.log("Scroll completed flag detected. Skipping scroll animations.");
    } else {
      // 初期状態ではグリッチを強く
      glitchPass.uniforms.amount.value = 0.8;
      
      // 初期位置に設定
      camera.position.copy(initialCameraPos);
      camera.lookAt(initialLookAt);
    }

    // カメラ手ブレ用
    const baseCameraRotation = new THREE.Euler();
    const shakeIntensity = 0.005; // 揺れの強さ
    const shakeSpeed = 5;        // 揺れの速度

    // 現在の注視点に基づいてカメラの基本回転を計算する関数
    function updateBaseCameraRotation() {
      // 一時的にカメラを注視点に向ける
      const tempCamera = camera.clone();
      tempCamera.position.copy(camera.position);
      tempCamera.lookAt(currentLookAt);
      
      // その回転値を取得
      baseCameraRotation.copy(tempCamera.rotation);
    }

    // 初期状態での基本回転を設定
    updateBaseCameraRotation();

    let isScrollDisabled = false; 
    let scrollPercent = isScrollCompleted ? 1 : 0;

    // スクロールイベント
    virtualScroll.addEventListener("scroll", () => {
      if (isScrollDisabled || isScrollCompleted) {
        return;
      }
      const maxScroll = virtualScroll.scrollHeight - virtualScroll.clientHeight;
      const currentScroll = virtualScroll.scrollTop;
      scrollPercent = Math.min(currentScroll / maxScroll, 1);
      
      // カメラの位置を補間
      camera.position.lerpVectors(
        initialCameraPos,
        finalCameraPos,
        Math.min(scrollPercent * 1.5, 1) // scrollPercentが0.7付近で変化が完了するように1.5倍
      );
      
      // 注視点を補間
      currentLookAt.lerpVectors(
        initialLookAt,
        finalLookAt,
        Math.min(scrollPercent * 1.5, 1)
      );
      
      // カメラの注視点を更新
      camera.lookAt(currentLookAt);
      
      // 基本回転を更新（手ブレ効果用）
      updateBaseCameraRotation();
      
      if (scrollPercent >= 1) {
        isScrollDisabled = true;
        sessionStorage.setItem("scrollCompleted", "true");

        vrmContainer.classList.remove("fixed");
        vrmContainer.classList.add("normal");
        animatedText.style.display = "block";
        glitchPass.uniforms.amount.value = 0.2 + (1 - scrollPercent) * 0.6;
        return;
      }

      if (scrollPercent >= 0.7) {
        vrmContainer.classList.remove("fixed");
        vrmContainer.classList.add("normal");
        animatedText.style.display = "block";
      } else {
        vrmContainer.classList.remove("normal");
        vrmContainer.classList.add("fixed");
        animatedText.style.display = "none";
      }

      glitchPass.uniforms.amount.value = 0.2 + (1 - scrollPercent) * 0.6;
    });

    // GLTFLoader セットアップ
    const loader = new GLTFLoader();
    loader.register((parser) => new VRMLoaderPlugin(parser));
    loader.register((parser) => new VRMAnimationLoaderPlugin(parser));

    // currentVrm / currentMixer は型を定義
    let currentVrm: VRM | null = null;
    let currentMixer: THREE.AnimationMixer | null = null;

    // -----------------------------
    // VRM ロード
    // -----------------------------
    try {
      const gltf = await new Promise<GLTF>((resolve, reject) => {
        loader.load(
          "/models/demo.vrm",
          resolve,
          (progress) => {
            vrmProgressValue = progress.loaded / progress.total; 
            updateLoadingDisplay();
          },
          reject
        );
      });

      const vrm = gltf.userData.vrm as VRM;
      if (vrm) {
        currentVrm = vrm;
        scene.add(vrm.scene);

        vrm.scene.position.set(0, 0, 0);
        vrm.scene.rotation.y = Math.PI;

        // サンプルとして表情を設定
        if (vrm.expressionManager) {
          vrm.expressionManager.setValue("blink", 1.0);
          vrm.expressionManager.update();
        }
      }

      vrmLoaded = true;
      updateLoadingDisplay(); // ロード完了を反映
    } catch (error) {
      console.error("Error loading VRM model:", error);
    }

    // -----------------------------
    // VRMA ロード
    // -----------------------------
    try {
      const gltf2 = await new Promise<GLTF>((resolve, reject) => {
        loader.load(
          "/animations/listen.vrma", 
          resolve,
          (progress) => {
            vrmaProgressValue = progress.loaded / progress.total;
            updateLoadingDisplay();
          },
          reject
        );
      });

      const vrmAnimations = gltf2.userData.vrmAnimations;
      if (vrmAnimations && vrmAnimations.length > 0 && currentVrm) {
        const vrma = vrmAnimations[0];

        currentMixer = new THREE.AnimationMixer(currentVrm.scene);
        const clip = createVRMAnimationClip(vrma, currentVrm);
        const action = currentMixer.clipAction(clip);
        action.play();

        console.log("VRMA animation loaded and playing");
      }

      vrmaLoaded = true;
      updateLoadingDisplay(); // ロード完了を反映
    } catch (error) {
      console.error("Error loading VRMA animation:", error);
    }

    // -----------------------------
    // アニメーションループ開始
    // -----------------------------
    const clock = new THREE.Clock();
    function animate() {
      requestAnimationFrame(animate);

      const delta = clock.getDelta();

      // カメラ手ブレ効果
      const elapsed = clock.elapsedTime * shakeSpeed;
      const shakeX = Math.sin(elapsed * 0.7) * shakeIntensity;
      const shakeY = Math.cos(elapsed * 0.5) * shakeIntensity;
      const shakeZ = Math.sin(elapsed * 0.3) * shakeIntensity;

      camera.rotation.x = baseCameraRotation.x + shakeY;
      camera.rotation.y = baseCameraRotation.y + shakeX;
      camera.rotation.z = baseCameraRotation.z + shakeZ;

      // VRM・ライトなどの更新
      if (currentVrm) {
        if (currentVrm.expressionManager) {
          currentVrm.expressionManager.setValue("blink", 1.0 - scrollPercent);
          currentVrm.expressionManager.update();
        }

        directionalLight.intensity = 1.0 + scrollPercent * 0.8;
        ambientLight.intensity = 0.5 + scrollPercent * 0.4;

        currentVrm.update(delta);
      }

      if (currentMixer) {
        currentMixer.update(delta);
      }

      glitchPass.uniforms.time.value += delta;
      composer.render();
    }
    animate();

    // -----------------------------
    // リサイズ対応
    // -----------------------------
    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      composer.setSize(window.innerWidth, window.innerHeight);
    });

    // virtual-scroll へのフォーカス強制解除
    setTimeout(() => {
      (virtualScroll as HTMLDivElement).blur();
      console.log("virtual-scroll blur executed");
    }, 100);
  };

  document.addEventListener("DOMContentLoaded", main);
</script>
