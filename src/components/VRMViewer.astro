<div class="vrm-container-wrapper">
    <div id="vrm-container" class="vrm-viewer"></div>
    <div class="blur-overlay"></div>
</div>

<script>
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { VRM, VRMLoaderPlugin } from '@pixiv/three-vrm';

// シーンのセットアップ
const scene = new THREE.Scene();
scene.background = new THREE.Color(0xffffff);

// カメラのセットアップ（顔の前に固定）
const camera = new THREE.PerspectiveCamera(45.0, window.innerWidth / window.innerHeight, 0.1, 100.0);
camera.position.set(0, 1.3, 0.7);  // Z座標を小さくして顔に近づける
camera.lookAt(0, 1.5, 0);

const container = document.getElementById('vrm-container');
if (!container) {
    throw new Error('Container element not found');
}

const renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: true
});
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setClearColor(0xffffff, 1);
renderer.outputColorSpace = THREE.SRGBColorSpace;
container.appendChild(renderer.domElement);

// ライトのセットアップ
const directionalLight = new THREE.DirectionalLight(0xeeeeee, 1.0);  // 初期値 1.0
directionalLight.position.set(1, 1, 1);
scene.add(directionalLight);

const ambientLight = new THREE.AmbientLight(0xeeeeee, 0.5);  // 初期値 0.5
scene.add(ambientLight);

// スクロール量の追跡
let scrollPercent = 0;
window.addEventListener('scroll', () => {
    const maxScroll = document.documentElement.scrollHeight - window.innerHeight;
    scrollPercent = Math.min(window.scrollY / maxScroll, 1);
    console.log('Scroll percent:', scrollPercent);
});

// VRMモデルのロード
const loader = new GLTFLoader();
loader.register((parser) => new VRMLoaderPlugin(parser));

let currentVrm: VRM | null = null;

loader.load(
    '/models/demo.vrm',
    async (gltf: GLTF) => {
        const vrm = gltf.userData.vrm as VRM;
        if (vrm) {
            currentVrm = vrm;
            scene.add(vrm.scene);
            
            // モデルの位置と向きを調整
            vrm.scene.position.set(0, 0, 0);
            vrm.scene.rotation.y = Math.PI;  // モデルを正面に向ける

            // 初期状態で目を閉じる
            if (vrm.expressionManager) {
                vrm.expressionManager.setValue('blink', 1.0);
                vrm.expressionManager.update();
            }
        }
    },
    (progress) => {
        console.log('Loading progress:', (progress.loaded / progress.total * 100) + '%');
    },
    (error) => {
        console.error('Error loading model:', error);
    }
);

// アニメーションループ
const clock = new THREE.Clock();

function animate() {
    requestAnimationFrame(animate);
    
    if (currentVrm) {
        // スクロール量に応じて目を開く（1.0 - scrollPercentで反転）
        if (currentVrm.expressionManager) {
            currentVrm.expressionManager.setValue('blink', 1.0 - scrollPercent);
            currentVrm.expressionManager.update();
        }
        
        // スクロール量に応じてライトの強度を変更
        directionalLight.intensity = 1.0 + (scrollPercent * 0.5); // 1.0 → 1.5
        ambientLight.intensity = 0.5 + (scrollPercent * 0.25);    // 0.5 → 0.75
        
        currentVrm.update(clock.getDelta());
    }
    
    renderer.render(scene, camera);
}

animate();

// ウィンドウリサイズ対応
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>

<style>
.vrm-viewer {
    width: 100%;
    height: 100vh;
    background: #c2c2c2;
}
</style>

