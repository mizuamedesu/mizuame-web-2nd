---
// src/pages/slides/[slug].astro
import { readdir } from "fs/promises";
import path from "path";
import Layout from "../../layouts/SlideLayout.astro";

// 静的ルート生成: public/slides フォルダからPDFファイル一覧を取得
export async function getStaticPaths() {
  const slidesDir = path.join(process.cwd(), "public/slides");

  try {
    const files = await readdir(slidesDir);
    const pdfFiles = files.filter((file) => file.endsWith(".pdf"));

    return pdfFiles.map((file) => ({
      params: {
        slug: file.replace(".pdf", ""),
      },
      props: {
        filename: file,
        title: file.replace(".pdf", "").replace(/-/g, " "),
      },
    }));
  } catch (error) {
    console.log("slides フォルダが存在しません");
    return [];
  }
}

const { slug } = Astro.params;
const { filename, title } = Astro.props;
---

<Layout title={`スライド: ${title}`} description={`${title}のスライド表示`}>
  <main>
    <div class="slide-header">
      <a href="/slides" class="back-link">← スライド一覧に戻る</a>
      <h2>{title}</h2>
    </div>

    <div class="slide-container" id="slide-container">
      <div id="loading">スライドを読み込み中...</div>
      <canvas id="pdf-canvas"></canvas>
    </div>

    <div class="slide-controls">
      <button id="prev-page" disabled>前のページ</button>
      <span id="page-info">
        <span id="current-page">1</span> / <span id="total-pages">-</span>
      </span>
      <button id="next-page" disabled>次のページ</button>
      <div class="action-buttons">
        <button id="download-btn" title="PDFをダウンロード">ダウンロード</button>
        <button id="fullscreen-btn" title="全画面表示">全画面</button>
      </div>
    </div>

    <!-- 全画面時のコントロール -->
    <div class="fullscreen-controls" id="fullscreen-controls">
      <button id="fs-prev" title="前のページ">‹</button>
      <span id="fs-page-info">
        <span id="fs-current-page">1</span> / <span id="fs-total-pages">-</span>
      </span>
      <button id="fs-next" title="次のページ">›</button>
      <button id="fs-exit" title="全画面終了">✕</button>
    </div>

    <!-- 擬似全画面オーバーレイ -->
    <div class="pseudo-fullscreen-overlay" id="pseudo-fullscreen-overlay">
      <div class="pseudo-fullscreen-container" id="pseudo-fullscreen-container">
        <canvas id="pseudo-fullscreen-canvas"></canvas>
        <div class="pseudo-fullscreen-controls">
          <button id="pfs-prev" title="前のページ">‹</button>
          <span id="pfs-page-info">
            <span id="pfs-current-page">1</span> / <span id="pfs-total-pages">-</span>
          </span>
          <button id="pfs-next" title="次のページ">›</button>
          <button id="pfs-exit" title="全画面終了">✕</button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .slide-header {
    margin-bottom: 2rem;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 1rem;
    color: #0066cc;
    text-decoration: none;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .slide-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 2rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .slide-controls button {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    background: #fff;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s;
  }

  .slide-controls button:hover:not(:disabled) {
    background: #f0f0f0;
  }

  .slide-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .action-buttons {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: auto;
  }

  #download-btn {
    background: #17a2b8 !important;
    color: white !important;
    border-color: #138496 !important;
  }

  #download-btn:hover:not(:disabled) {
    background: #138496 !important;
    border-color: #117a8b !important;
  }

  #page-info {
    font-weight: bold;
    min-width: 80px;
    text-align: center;
  }

  .slide-container {
    text-align: center;
    overflow: auto;
    position: relative;
    touch-action: pan-x pan-y;
  }

  #pdf-canvas {
    max-width: 100%;
    box-shadow:
      0 8px 24px rgba(0, 0, 0, 0.15),
      0 4px 8px rgba(0, 0, 0, 0.1);
    background: white;
    border-radius: 8px;
    user-select: none;
    -webkit-user-select: none;
  }

  #loading {
    color: #666;
    font-size: 1.1rem;
    padding: 2rem;
  }

  .error {
    color: #cc0000;
    font-size: 1.1rem;
    padding: 2rem;
  }

  /* 通常の全画面コントロール */
  .fullscreen-controls {
    display: none;
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    padding: 10px 15px;
    gap: 15px;
    align-items: center;
    z-index: 1000;
    color: white;
  }

  .fullscreen-controls button {
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.2s;
  }

  .fullscreen-controls button:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  #fs-page-info {
    font-weight: bold;
    min-width: 60px;
    text-align: center;
  }

  /* 擬似全画面オーバーレイ（モバイルのみ） */
  .pseudo-fullscreen-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    height: 100dvh; /* iOS Safariのため */
    background: black;
    z-index: 9999;
    overflow: hidden;
  }

  /* モバイル時のみ擬似全画面を有効にする */
  @media (max-width: 768px), (hover: none) and (pointer: coarse) {
    .pseudo-fullscreen-overlay.active {
      display: flex;
    }
  }

  .pseudo-fullscreen-container {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  }

  #pseudo-fullscreen-canvas {
    max-width: 100vw;
    max-height: 100vh;
    max-height: 100dvh; /* iOS Safariのため */
    object-fit: contain;
    user-select: none;
    -webkit-user-select: none;
  }

  .pseudo-fullscreen-controls {
    position: absolute;
    bottom: env(safe-area-inset-bottom, 20px);
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    padding: 12px 18px;
    display: flex;
    gap: 18px;
    align-items: center;
    color: white;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .pseudo-fullscreen-controls button {
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 10px 15px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 18px;
    transition: background-color 0.2s;
    min-width: 44px; /* タッチしやすいサイズ */
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .pseudo-fullscreen-controls button:hover,
  .pseudo-fullscreen-controls button:active {
    background: rgba(255, 255, 255, 0.2);
  }

  #pfs-page-info {
    font-weight: bold;
    min-width: 80px;
    text-align: center;
    font-size: 16px;
  }

  /* 通常の全画面時のスタイル */
  .slide-container:fullscreen {
    background: black;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slide-container:fullscreen #pdf-canvas {
    max-height: 100vh;
    max-width: 100vw;
    object-fit: contain;
    box-shadow:
      0 12px 32px rgba(255, 255, 255, 0.1),
      0 8px 16px rgba(255, 255, 255, 0.05);
  }

  /* WebKit用の全画面スタイル */
  .slide-container:-webkit-full-screen {
    background: black;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slide-container:-webkit-full-screen #pdf-canvas {
    max-height: 100vh;
    max-width: 100vw;
    object-fit: contain;
    box-shadow:
      0 12px 32px rgba(255, 255, 255, 0.1),
      0 8px 16px rgba(255, 255, 255, 0.05);
  }

  /* 擬似全画面時のbody固定 */
  body.pseudo-fullscreen-active {
    overflow: hidden;
    position: fixed;
    width: 100%;
    height: 100%;
  }

  /* モバイル対応 */
  @media (max-width: 768px) {
    .slide-controls {
      flex-direction: column;
      align-items: stretch;
    }

    /* モバイル時は次へ・戻るボタンを非表示 */
    #prev-page,
    #next-page {
      display: none;
    }

    .action-buttons {
      margin-left: 0;
      justify-content: center;
    }

    .slide-controls button {
      padding: 0.75rem 1rem;
      font-size: 1rem;
    }

    #page-info {
      text-align: center;
      margin-bottom: 1rem;
      font-size: 1.1rem;
    }

    .fullscreen-controls {
      bottom: env(safe-area-inset-bottom, 10px);
      padding: 8px 12px;
    }

    .fullscreen-controls button {
      padding: 12px 18px;
      font-size: 20px;
      min-width: 44px;
      min-height: 44px;
    }
  }
</style>

<script define:vars={{ slug, filename }}>
  document.addEventListener("DOMContentLoaded", async () => {
    // PDF.js はCDNから読み込み済み（グローバルのpdfjsLibを使用）
    if (typeof pdfjsLib === "undefined") {
      console.error("PDF.js が読み込まれていません");
      return;
    }

    // PDF.js worker の設定
    pdfjsLib.GlobalWorkerOptions.workerSrc =
      "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js";

    class SlideViewer {
      constructor() {
        this.pdf = null;
        this.currentPage = 1;
        this.totalPages = 0;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.isFullscreen = false;
        this.isPseudoFullscreen = false;
        this.isMobile = this.detectMobile();

        const canvas = document.getElementById("pdf-canvas");
        if (!canvas || !(canvas instanceof HTMLCanvasElement)) {
          console.error("Canvas要素が見つかりません");
          return;
        }

        this.canvas = canvas;
        const context = this.canvas.getContext("2d");
        if (!context) {
          console.error("Canvas context の取得に失敗しました");
          return;
        }
        this.context = context;

        // 擬似全画面用のcanvas
        const pseudoCanvas = document.getElementById("pseudo-fullscreen-canvas");
        if (pseudoCanvas && pseudoCanvas instanceof HTMLCanvasElement) {
          this.pseudoCanvas = pseudoCanvas;
          this.pseudoContext = this.pseudoCanvas.getContext("2d");
        }

        this.initializeElements();
        this.bindEvents();
        this.loadPDF();
      }

      detectMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1); // iPad Pro detection
      }

      initializeElements() {
        this.prevButton = document.getElementById("prev-page");
        this.nextButton = document.getElementById("next-page");
        this.currentPageSpan = document.getElementById("current-page");
        this.totalPagesSpan = document.getElementById("total-pages");
        this.downloadButton = document.getElementById("download-btn");
        this.fullscreenButton = document.getElementById("fullscreen-btn");
        this.loadingDiv = document.getElementById("loading");
        this.slideContainer = document.getElementById("slide-container");

        // 通常の全画面コントロール
        this.fullscreenControls = document.getElementById("fullscreen-controls");
        this.fsPrevButton = document.getElementById("fs-prev");
        this.fsNextButton = document.getElementById("fs-next");
        this.fsCurrentPageSpan = document.getElementById("fs-current-page");
        this.fsTotalPagesSpan = document.getElementById("fs-total-pages");
        this.fsExitButton = document.getElementById("fs-exit");

        // 擬似全画面コントロール
        this.pseudoFullscreenOverlay = document.getElementById("pseudo-fullscreen-overlay");
        this.pfsPrevButton = document.getElementById("pfs-prev");
        this.pfsNextButton = document.getElementById("pfs-next");
        this.pfsCurrentPageSpan = document.getElementById("pfs-current-page");
        this.pfsTotalPagesSpan = document.getElementById("pfs-total-pages");
        this.pfsExitButton = document.getElementById("pfs-exit");

        // null チェック
        if (
          !this.prevButton ||
          !this.nextButton ||
          !this.currentPageSpan ||
          !this.totalPagesSpan ||
          !this.downloadButton ||
          !this.fullscreenButton ||
          !this.loadingDiv ||
          !this.slideContainer
        ) {
          console.error("必要なUI要素が見つかりません");
          return;
        }
      }

      bindEvents() {
        if (
          !this.prevButton ||
          !this.nextButton ||
          !this.downloadButton ||
          !this.fullscreenButton
        ) {
          console.error("ボタン要素が見つかりません");
          return;
        }

        // 通常のコントロール
        this.prevButton.addEventListener("click", () => this.goToPreviousPage());
        this.nextButton.addEventListener("click", () => this.goToNextPage());
        this.downloadButton.addEventListener("click", () => this.downloadPDF());
        this.fullscreenButton.addEventListener("click", () => this.toggleFullscreen());

        // 通常の全画面コントロール
        if (this.fsPrevButton && this.fsNextButton && this.fsExitButton) {
          this.fsPrevButton.addEventListener("click", () => this.goToPreviousPage());
          this.fsNextButton.addEventListener("click", () => this.goToNextPage());
          this.fsExitButton.addEventListener("click", () => this.exitFullscreen());
        }

        // 擬似全画面コントロール
        if (this.pfsPrevButton && this.pfsNextButton && this.pfsExitButton) {
          this.pfsPrevButton.addEventListener("click", () => this.goToPreviousPage());
          this.pfsNextButton.addEventListener("click", () => this.goToNextPage());
          this.pfsExitButton.addEventListener("click", () => this.exitPseudoFullscreen());
        }

        // キーボードショートカット
        document.addEventListener("keydown", (e) => {
          switch (e.key) {
            case "ArrowLeft":
              e.preventDefault();
              this.goToPreviousPage();
              break;
            case "ArrowRight":
              e.preventDefault();
              this.goToNextPage();
              break;
            case "Escape":
              if (this.isPseudoFullscreen) {
                this.exitPseudoFullscreen();
              } else if (this.isFullscreen) {
                this.exitFullscreen();
              }
              break;
            case "f":
            case "F":
              if (!this.isFullscreen && !this.isPseudoFullscreen) {
                this.toggleFullscreen();
              }
              break;
          }
        });

        // タッチイベント（通常のcanvas）
        this.bindTouchEvents(this.canvas);

        // タッチイベント（擬似全画面canvas - モバイルのみ）
        if (this.isMobile && this.pseudoCanvas) {
          this.bindTouchEvents(this.pseudoCanvas);
        }

        // 全画面状態の監視（通常の全画面のみ）
        document.addEventListener("fullscreenchange", () => {
          this.handleFullscreenChange();
        });
        document.addEventListener("webkitfullscreenchange", () => {
          this.handleFullscreenChange();
        });
      }

      bindTouchEvents(canvas) {
        canvas.addEventListener(
          "touchstart",
          (e) => {
            if (e.touches.length === 1) {
              this.touchStartX = e.touches[0].clientX;
              this.touchStartY = e.touches[0].clientY;
            }
          },
          { passive: true }
        );

        canvas.addEventListener(
          "touchend",
          (e) => {
            if (e.changedTouches.length === 1) {
              const touchEndX = e.changedTouches[0].clientX;
              const touchEndY = e.changedTouches[0].clientY;

              const deltaX = touchEndX - this.touchStartX;
              const deltaY = touchEndY - this.touchStartY;

              // 水平方向のスワイプのみを判定（垂直方向のスクロールを除外）
              if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                  this.goToPreviousPage(); // 右スワイプ：前のページ
                } else {
                  this.goToNextPage(); // 左スワイプ：次のページ
                }
              }
            }
          },
          { passive: true }
        );
      }

      async loadPDF() {
        if (!this.totalPagesSpan || !this.loadingDiv || !this.canvas) {
          console.error("必要な要素が見つかりません");
          return;
        }

        try {
          this.pdf = await pdfjsLib.getDocument(`/slides/${filename}`).promise;
          this.totalPages = this.pdf.numPages;
          this.totalPagesSpan.textContent = this.totalPages.toString();

          // 全ての総ページ数表示を更新
          if (this.fsTotalPagesSpan) {
            this.fsTotalPagesSpan.textContent = this.totalPages.toString();
          }
          if (this.pfsTotalPagesSpan) {
            this.pfsTotalPagesSpan.textContent = this.totalPages.toString();
          }

          this.loadingDiv.style.display = "none";
          this.canvas.style.display = "block";

          await this.renderPage();
          this.updateControls();
        } catch (error) {
          console.error("PDF読み込みエラー:", error);
          this.loadingDiv.innerHTML =
            '<div class="error">スライドの読み込みに失敗しました</div>';
        }
      }

      async renderPage() {
        if (!this.pdf) {
          console.error("PDFが利用できません");
          return;
        }

        // PCの場合：従来通り通常のcanvasのみを使用
        if (!this.isMobile) {
          await this.renderToCanvas(this.canvas, this.context, this.isFullscreen);
          return;
        }

        // モバイルの場合：擬似全画面と通常表示を切り替え
        if (this.isPseudoFullscreen && this.pseudoCanvas && this.pseudoContext) {
          await this.renderToCanvas(this.pseudoCanvas, this.pseudoContext, true);
        } else {
          await this.renderToCanvas(this.canvas, this.context, false);
        }
      }

      async renderToCanvas(canvas, context, isFullscreen) {
        if (!canvas || !context) {
          console.error("Canvas または Context が利用できません");
          return;
        }

        const page = await this.pdf.getPage(this.currentPage);

        // デバイスピクセル比を取得
        const devicePixelRatio = window.devicePixelRatio || 1;

        // コンテナの利用可能サイズを取得
        let containerWidth, containerHeight;

        if (isFullscreen) {
          containerWidth = window.innerWidth;
          containerHeight = window.innerHeight;
        } else {
          const container = canvas.parentElement;
          containerWidth = container.clientWidth;
          containerHeight = window.innerHeight * 0.7;
        }

        // PDFページの元のサイズを取得
        const originalViewport = page.getViewport({ scale: 1.0 });

        // コンテナに収まるスケールを計算
        const scaleX = containerWidth / originalViewport.width;
        const scaleY = containerHeight / originalViewport.height;
        const baseScale = Math.min(scaleX, scaleY);

        // devicePixelRatio を考慮した実際のレンダリングスケール
        const renderScale = baseScale * devicePixelRatio;
        const viewport = page.getViewport({ scale: renderScale });

        // Canvas の内部解像度を高解像度に設定
        canvas.width = viewport.width;
        canvas.height = viewport.height;

        // CSS サイズは論理的なサイズに設定
        canvas.style.width = `${viewport.width / devicePixelRatio}px`;
        canvas.style.height = `${viewport.height / devicePixelRatio}px`;

        // Context のスケールをリセット
        context.setTransform(1, 0, 0, 1, 0, 0);

        // PDF をレンダリング
        await page.render({
          canvasContext: context,
          viewport: viewport,
        }).promise;
      }

      updateControls() {
        // 全ての現在ページ表示を更新
        if (this.currentPageSpan) {
          this.currentPageSpan.textContent = this.currentPage.toString();
        }
        if (this.fsCurrentPageSpan) {
          this.fsCurrentPageSpan.textContent = this.currentPage.toString();
        }
        if (this.pfsCurrentPageSpan) {
          this.pfsCurrentPageSpan.textContent = this.currentPage.toString();
        }

        const isFirstPage = this.currentPage <= 1;
        const isLastPage = this.currentPage >= this.totalPages;

        // 全てのボタンの状態を更新
        const buttons = [
          { prev: this.prevButton, next: this.nextButton },
          { prev: this.fsPrevButton, next: this.fsNextButton },
          { prev: this.pfsPrevButton, next: this.pfsNextButton }
        ];

        buttons.forEach(({ prev, next }) => {
          if (prev) prev.disabled = isFirstPage;
          if (next) next.disabled = isLastPage;
        });
      }

      async goToPreviousPage() {
        if (this.currentPage > 1) {
          this.currentPage--;
          await this.renderPage();
          this.updateControls();
        }
      }

      async goToNextPage() {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
          await this.renderPage();
          this.updateControls();
        }
      }

      downloadPDF() {
        const link = document.createElement("a");
        link.href = `/slides/${filename}`;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }

      async toggleFullscreen() {
        // モバイルの場合は擬似全画面を使用
        if (this.isMobile) {
          this.enterPseudoFullscreen();
          return;
        }

        // PC/デスクトップの場合は通常の全画面APIのみを使用
        if (!this.slideContainer) return;

        try {
          if (!document.fullscreenElement && !document.webkitFullscreenElement) {
            if (this.slideContainer.requestFullscreen) {
              await this.slideContainer.requestFullscreen();
            } else if (this.slideContainer.webkitRequestFullscreen) {
              await this.slideContainer.webkitRequestFullscreen();
            }
          } else {
            this.exitFullscreen();
          }
        } catch (error) {
          console.error("全画面表示の切り替えに失敗しました:", error);
        }
      }

      enterPseudoFullscreen() {
        // PC時は擬似全画面を使用しない
        if (!this.isMobile || this.isPseudoFullscreen) return;

        this.isPseudoFullscreen = true;
        
        // オーバーレイを表示
        if (this.pseudoFullscreenOverlay) {
          this.pseudoFullscreenOverlay.classList.add('active');
        }

        // bodyスクロールを無効化
        document.body.classList.add('pseudo-fullscreen-active');

        // 擬似全画面canvasをレンダリング
        this.renderPage();
      }

      exitPseudoFullscreen() {
        // PC時は擬似全画面を使用しない
        if (!this.isMobile || !this.isPseudoFullscreen) return;

        this.isPseudoFullscreen = false;

        // オーバーレイを非表示
        if (this.pseudoFullscreenOverlay) {
          this.pseudoFullscreenOverlay.classList.remove('active');
        }

        // bodyスクロールを有効化
        document.body.classList.remove('pseudo-fullscreen-active');

        // 通常canvasを再レンダリング
        this.renderPage();
      }

      async exitFullscreen() {
        try {
          if (document.exitFullscreen) {
            await document.exitFullscreen();
          } else if (document.webkitExitFullscreen) {
            await document.webkitExitFullscreen();
          }
        } catch (error) {
          console.error("全画面終了に失敗しました:", error);
        }
      }

      handleFullscreenChange() {
        this.isFullscreen = !!(
          document.fullscreenElement || document.webkitFullscreenElement
        );

        if (this.fullscreenControls) {
          this.fullscreenControls.style.display = this.isFullscreen ? "flex" : "none";
        }

        // 全画面状態が変わったらページを再描画
        // PC時は常に再描画、モバイル時は擬似全画面でない場合のみ再描画
        if (!this.isMobile || !this.isPseudoFullscreen) {
          this.renderPage();
        }
      }
    }

    // ページ読み込み完了後にビューアーを初期化
    new SlideViewer();
  });
</script>