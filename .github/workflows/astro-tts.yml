name: Astro Blog with TTS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/content/blog/**'
      - 'src/**'
      - 'astro.config.mjs'
      - 'package.json'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all audio files'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Initialize Style-Bert-VITS2 submodule
      run: |
        git submodule update --init --recursive
        ls -la Style-Bert-VITS2-GitHub-Actions/ || echo "Submodule not found"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Verify required files
      run: |
        echo "Checking required files..."
        ls -la Dockerfile || echo "ERROR: Dockerfile not found"
        ls -la r2_utils.py || echo "ERROR: r2_utils.py not found"
        ls -la astro_tts_processor.py || echo "ERROR: astro_tts_processor.py not found"
        ls -la Style-Bert-VITS2-GitHub-Actions/tts_synthesizer.py || echo "ERROR: tts_synthesizer.py not found in submodule"
        ls -la Style-Bert-VITS2-GitHub-Actions/requirements.txt || echo "WARNING: requirements.txt not found in submodule"
        
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Style-Bert-VITS2-GitHub-Actions/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Build Docker image with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: astro-tts:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate audio files
      env:
        R2_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        TTS_MODEL_NAME: ${{ secrets.TTS_MODEL_NAME }}
        TTS_MODEL_ID: ${{ secrets.TTS_MODEL_ID }}
        TTS_SPEAKER_NAME: ${{ secrets.TTS_SPEAKER_NAME }}
        TTS_SPEAKER_ID: ${{ secrets.TTS_SPEAKER_ID }}
        TTS_SPEED: ${{ secrets.TTS_SPEED }}
        TTS_NOISE: ${{ secrets.TTS_NOISE }}
        TTS_NOISEW: ${{ secrets.TTS_NOISEW }}
      run: |
        docker run --rm \
          -u $(id -u):$(id -g) \
          -v $(pwd):/home/user/app \
          -e R2_ENDPOINT_URL="${R2_ENDPOINT_URL}" \
          -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
          -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
          -e R2_BUCKET_NAME="${R2_BUCKET_NAME}" \
          -e TTS_MODEL_NAME="${TTS_MODEL_NAME}" \
          -e TTS_MODEL_ID="${TTS_MODEL_ID}" \
          -e TTS_SPEAKER_NAME="${TTS_SPEAKER_NAME}" \
          -e TTS_SPEAKER_ID="${TTS_SPEAKER_ID}" \
          -e TTS_SPEED="${TTS_SPEED}" \
          -e TTS_NOISE="${TTS_NOISE}" \
          -e TTS_NOISEW="${TTS_NOISEW}" \
          astro-tts:latest \
          /home/user/startup.sh python3 astro_tts_processor.py --content-dir src/content/blog --audio-dir public/audio
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install Astro dependencies
      run: npm ci
    
    - name: Check generated audio files
      run: |
        echo "Generated audio files:"
        ls -la public/audio/ || echo "No audio files generated"
        du -sh public/audio/ || echo "Audio directory empty"
        
        echo "Audio mapping file:"
        cat public/audio-mapping.json || echo "No audio mapping file"
    
    - name: Build Astro site
      run: |
        echo "Building Astro site..."
        npm run build
        
        echo "Build completed. Contents of dist:"
        ls -la dist/ || echo "Dist directory not found"
        
        echo "Audio files in dist:"
        ls -la dist/audio/ || echo "Audio files not found in dist"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: astro-build-${{ github.run_number }}
        path: |
          dist/
          public/audio/
        retention-days: 7
    
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create deployment summary
      run: |
        echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Generated Audio Files" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "public/audio" ] && [ "$(ls -A public/audio)" ]; then
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          for file in public/audio/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "| $filename | $size |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "No audio files were generated." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "Site deployed to Cloudflare Pages" >> $GITHUB_STEP_SUMMARY